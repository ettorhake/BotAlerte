# BotAlerte - Makefile pour installation et gestion
.PHONY: help install install-dev install-quick test run clean setup

# Variables
PYTHON := python3
PIP := $(PYTHON) -m pip
VENV := venv
REQUIREMENTS := requirements.txt

# Couleurs pour l'affichage
GREEN := \033[0;32m
BLUE := \033[0;34m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m # No Color

help: ## Afficher cette aide
	@echo "$(BLUE)ü§ñ BotAlerte - Commandes disponibles$(NC)"
	@echo "======================================"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""
	@echo "$(YELLOW)Exemples d'utilisation :$(NC)"
	@echo "  make install        # Installation compl√®te"
	@echo "  make install-quick  # Sans Selenium"
	@echo "  make run           # Lancer le bot"
	@echo "  make test          # Tester la configuration"

install: ## Installation compl√®te avec Selenium
	@echo "$(BLUE)üöÄ Installation compl√®te de BotAlerte$(NC)"
	@echo "======================================="
	@./install.sh || (echo "$(RED)‚ùå Script install.sh non trouv√©, installation manuelle...$(NC)" && $(MAKE) install-manual)

install-quick: ## Installation rapide sans Selenium
	@echo "$(BLUE)‚ö° Installation rapide (sans Selenium)$(NC)"
	@echo "======================================="
	@./install.sh -q || (echo "$(RED)‚ùå Script install.sh non trouv√©, installation manuelle...$(NC)" && $(MAKE) install-manual-quick)

install-dev: ## Installation avec environnement virtuel
	@echo "$(BLUE)üîß Installation d√©veloppeur (avec venv)$(NC)"
	@echo "========================================="
	@./install.sh -v || (echo "$(RED)‚ùå Script install.sh non trouv√©, installation manuelle...$(NC)" && $(MAKE) install-manual-venv)

install-manual: ## Installation manuelle compl√®te
	@echo "$(BLUE)üì¶ Installation manuelle$(NC)"
	@$(MAKE) check-python
	@$(MAKE) install-deps
	@$(MAKE) setup-dirs
	@echo "$(GREEN)‚úÖ Installation manuelle termin√©e$(NC)"

install-manual-quick: ## Installation manuelle sans Selenium
	@echo "$(BLUE)üì¶ Installation manuelle rapide$(NC)"
	@$(MAKE) check-python
	@$(PIP) install requests beautifulsoup4 schedule lxml
	@$(MAKE) setup-dirs
	@echo "$(GREEN)‚úÖ Installation manuelle rapide termin√©e$(NC)"

install-manual-venv: ## Installation manuelle avec environnement virtuel
	@echo "$(BLUE)üì¶ Installation manuelle avec venv$(NC)"
	@$(MAKE) check-python
	@$(PYTHON) -m venv $(VENV)
	@. $(VENV)/bin/activate && $(PIP) install --upgrade pip
	@. $(VENV)/bin/activate && $(MAKE) install-deps
	@$(MAKE) setup-dirs
	@echo "$(GREEN)‚úÖ Installation avec venv termin√©e$(NC)"
	@echo "$(YELLOW)üí° Activez l'environnement : source $(VENV)/bin/activate$(NC)"

check-python: ## V√©rifier la version de Python
	@echo "$(BLUE)üêç V√©rification de Python...$(NC)"
	@$(PYTHON) --version || (echo "$(RED)‚ùå Python 3 non trouv√©$(NC)" && exit 1)
	@echo "$(GREEN)‚úÖ Python OK$(NC)"

install-deps: ## Installer les d√©pendances Python
	@echo "$(BLUE)üìã Installation des d√©pendances...$(NC)"
	@$(PIP) install --upgrade pip
	@if [ -f $(REQUIREMENTS) ]; then \
		$(PIP) install -r $(REQUIREMENTS); \
	else \
		echo "$(YELLOW)‚ö†Ô∏è requirements.txt non trouv√©, installation manuelle...$(NC)"; \
		$(PIP) install requests beautifulsoup4 schedule lxml selenium webdriver-manager; \
	fi
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

setup-dirs: ## Cr√©er les r√©pertoires n√©cessaires
	@echo "$(BLUE)üìÅ Cr√©ation des r√©pertoires...$(NC)"
	@mkdir -p logs
	@chmod +x start_bot.sh || true
	@chmod +x install.sh || true
	@echo "$(GREEN)‚úÖ R√©pertoires cr√©√©s$(NC)"

test: ## Tester l'installation et la configuration
	@echo "$(BLUE)üß™ Test de l'installation$(NC)"
	@$(PYTHON) -c "import requests, bs4, schedule, lxml; print('‚úÖ D√©pendances de base OK')" || (echo "$(RED)‚ùå D√©pendances manquantes$(NC)" && exit 1)
	@$(PYTHON) -c "import selenium; print('‚úÖ Selenium OK')" || echo "$(YELLOW)‚ö†Ô∏è Selenium non disponible$(NC)"
	@if [ -f "config.json" ] && [ -f "universal_monitor.py" ]; then \
		echo "$(GREEN)‚úÖ Fichiers du bot d√©tect√©s$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Fichiers du bot non trouv√©s$(NC)"; \
	fi
	@if [ -f "config.json" ]; then \
		$(PYTHON) test_universal.py config.json || echo "$(YELLOW)‚ö†Ô∏è Configurez config.json avant de tester$(NC)"; \
	fi

run: ## Lancer le bot
	@echo "$(BLUE)ü§ñ Lancement du bot$(NC)"
	@if [ -f "start_bot.sh" ]; then \
		./start_bot.sh; \
	else \
		$(PYTHON) universal_monitor.py config.json; \
	fi

setup: ## Configuration initiale interactive
	@echo "$(BLUE)‚öôÔ∏è Configuration initiale$(NC)"
	@if [ -f "setup_email.py" ]; then \
		$(PYTHON) setup_email.py; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è setup_email.py non trouv√©$(NC)"; \
		echo "Modifiez manuellement config.json"; \
	fi

clean: ## Nettoyer les fichiers temporaires
	@echo "$(BLUE)üßπ Nettoyage$(NC)"
	@rm -rf __pycache__/
	@rm -rf *.pyc
	@rm -rf logs/*.log
	@rm -rf .pytest_cache/
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: clean ## Nettoyage complet (inclut venv)
	@echo "$(BLUE)üßπ Nettoyage complet$(NC)"
	@rm -rf $(VENV)/
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

status: ## Afficher le statut du syst√®me
	@echo "$(BLUE)üìä Statut du syst√®me$(NC)"
	@echo "====================="
	@echo "Python: $$($(PYTHON) --version 2>/dev/null || echo 'Non install√©')"
	@echo "Pip: $$($(PIP) --version 2>/dev/null || echo 'Non install√©')"
	@echo "Chrome: $$(google-chrome --version 2>/dev/null || chromium --version 2>/dev/null || echo 'Non install√©')"
	@echo ""
	@echo "Fichiers projet:"
	@echo "- config.json: $$([ -f config.json ] && echo '‚úÖ' || echo '‚ùå')"
	@echo "- universal_monitor.py: $$([ -f universal_monitor.py ] && echo '‚úÖ' || echo '‚ùå')"
	@echo "- requirements.txt: $$([ -f requirements.txt ] && echo '‚úÖ' || echo '‚ùå')"
	@echo "- start_bot.sh: $$([ -f start_bot.sh ] && echo '‚úÖ' || echo '‚ùå')"
	@echo ""
	@echo "R√©pertoires:"
	@echo "- logs/: $$([ -d logs ] && echo '‚úÖ' || echo '‚ùå')"
	@echo "- venv/: $$([ -d venv ] && echo '‚úÖ' || echo '‚ùå')"

update: ## Mettre √† jour les d√©pendances
	@echo "$(BLUE)üîÑ Mise √† jour des d√©pendances$(NC)"
	@$(PIP) install --upgrade pip
	@$(PIP) install --upgrade -r $(REQUIREMENTS)
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

# Cible par d√©faut
.DEFAULT_GOAL := help